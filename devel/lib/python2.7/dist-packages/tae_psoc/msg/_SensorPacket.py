# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tae_psoc/SensorPacket.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SensorPacket(genpy.Message):
  _md5sum = "b42cd8856cf6ff4337fc1ed6207fb9c0"
  _type = "tae_psoc/SensorPacket"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16[] sns_1_FFT_NS
uint16[] sns_1_FFT_WE
int16[] sns_1_4Ch
float32[] sns_1_F_M
uint16[] sns_2_FFT_NS
uint16[] sns_2_FFT_WE
int16[] sns_2_4Ch
float32[] sns_2_F_M
float32 sns1_vorticity
float32 sns2_vorticity

"""
  __slots__ = ['sns_1_FFT_NS','sns_1_FFT_WE','sns_1_4Ch','sns_1_F_M','sns_2_FFT_NS','sns_2_FFT_WE','sns_2_4Ch','sns_2_F_M','sns1_vorticity','sns2_vorticity']
  _slot_types = ['uint16[]','uint16[]','int16[]','float32[]','uint16[]','uint16[]','int16[]','float32[]','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sns_1_FFT_NS,sns_1_FFT_WE,sns_1_4Ch,sns_1_F_M,sns_2_FFT_NS,sns_2_FFT_WE,sns_2_4Ch,sns_2_F_M,sns1_vorticity,sns2_vorticity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorPacket, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sns_1_FFT_NS is None:
        self.sns_1_FFT_NS = []
      if self.sns_1_FFT_WE is None:
        self.sns_1_FFT_WE = []
      if self.sns_1_4Ch is None:
        self.sns_1_4Ch = []
      if self.sns_1_F_M is None:
        self.sns_1_F_M = []
      if self.sns_2_FFT_NS is None:
        self.sns_2_FFT_NS = []
      if self.sns_2_FFT_WE is None:
        self.sns_2_FFT_WE = []
      if self.sns_2_4Ch is None:
        self.sns_2_4Ch = []
      if self.sns_2_F_M is None:
        self.sns_2_F_M = []
      if self.sns1_vorticity is None:
        self.sns1_vorticity = 0.
      if self.sns2_vorticity is None:
        self.sns2_vorticity = 0.
    else:
      self.sns_1_FFT_NS = []
      self.sns_1_FFT_WE = []
      self.sns_1_4Ch = []
      self.sns_1_F_M = []
      self.sns_2_FFT_NS = []
      self.sns_2_FFT_WE = []
      self.sns_2_4Ch = []
      self.sns_2_F_M = []
      self.sns1_vorticity = 0.
      self.sns2_vorticity = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.sns_1_FFT_NS)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.sns_1_FFT_NS))
      length = len(self.sns_1_FFT_WE)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.sns_1_FFT_WE))
      length = len(self.sns_1_4Ch)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.pack(pattern, *self.sns_1_4Ch))
      length = len(self.sns_1_F_M)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.sns_1_F_M))
      length = len(self.sns_2_FFT_NS)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.sns_2_FFT_NS))
      length = len(self.sns_2_FFT_WE)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.sns_2_FFT_WE))
      length = len(self.sns_2_4Ch)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.pack(pattern, *self.sns_2_4Ch))
      length = len(self.sns_2_F_M)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.sns_2_F_M))
      _x = self
      buff.write(_get_struct_2f().pack(_x.sns1_vorticity, _x.sns2_vorticity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.sns_1_FFT_NS = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.sns_1_FFT_WE = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.sns_1_4Ch = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.sns_1_F_M = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.sns_2_FFT_NS = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.sns_2_FFT_WE = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.sns_2_4Ch = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.sns_2_F_M = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.sns1_vorticity, _x.sns2_vorticity,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.sns_1_FFT_NS)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.sns_1_FFT_NS.tostring())
      length = len(self.sns_1_FFT_WE)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.sns_1_FFT_WE.tostring())
      length = len(self.sns_1_4Ch)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.sns_1_4Ch.tostring())
      length = len(self.sns_1_F_M)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.sns_1_F_M.tostring())
      length = len(self.sns_2_FFT_NS)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.sns_2_FFT_NS.tostring())
      length = len(self.sns_2_FFT_WE)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.sns_2_FFT_WE.tostring())
      length = len(self.sns_2_4Ch)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.sns_2_4Ch.tostring())
      length = len(self.sns_2_F_M)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.sns_2_F_M.tostring())
      _x = self
      buff.write(_get_struct_2f().pack(_x.sns1_vorticity, _x.sns2_vorticity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.sns_1_FFT_NS = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.sns_1_FFT_WE = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.sns_1_4Ch = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.sns_1_F_M = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.sns_2_FFT_NS = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.sns_2_FFT_WE = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      end += struct.calcsize(pattern)
      self.sns_2_4Ch = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.sns_2_F_M = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 8
      (_x.sns1_vorticity, _x.sns2_vorticity,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
