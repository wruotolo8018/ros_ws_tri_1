// Generated by gencpp from file tae_psoc/cmdToPsoc.msg
// DO NOT EDIT!


#ifndef TAE_PSOC_MESSAGE_CMDTOPSOC_H
#define TAE_PSOC_MESSAGE_CMDTOPSOC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tae_psoc
{
template <class ContainerAllocator>
struct cmdToPsoc_
{
  typedef cmdToPsoc_<ContainerAllocator> Type;

  cmdToPsoc_()
    : cmdInput(0)  {
    }
  cmdToPsoc_(const ContainerAllocator& _alloc)
    : cmdInput(0)  {
  (void)_alloc;
    }



   typedef uint16_t _cmdInput_type;
  _cmdInput_type cmdInput;





  typedef boost::shared_ptr< ::tae_psoc::cmdToPsoc_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tae_psoc::cmdToPsoc_<ContainerAllocator> const> ConstPtr;

}; // struct cmdToPsoc_

typedef ::tae_psoc::cmdToPsoc_<std::allocator<void> > cmdToPsoc;

typedef boost::shared_ptr< ::tae_psoc::cmdToPsoc > cmdToPsocPtr;
typedef boost::shared_ptr< ::tae_psoc::cmdToPsoc const> cmdToPsocConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tae_psoc::cmdToPsoc_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tae_psoc::cmdToPsoc_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tae_psoc::cmdToPsoc_<ContainerAllocator1> & lhs, const ::tae_psoc::cmdToPsoc_<ContainerAllocator2> & rhs)
{
  return lhs.cmdInput == rhs.cmdInput;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tae_psoc::cmdToPsoc_<ContainerAllocator1> & lhs, const ::tae_psoc::cmdToPsoc_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tae_psoc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tae_psoc::cmdToPsoc_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tae_psoc::cmdToPsoc_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tae_psoc::cmdToPsoc_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tae_psoc::cmdToPsoc_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tae_psoc::cmdToPsoc_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tae_psoc::cmdToPsoc_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tae_psoc::cmdToPsoc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f597ee8bf0974f4111872a37a845ee1";
  }

  static const char* value(const ::tae_psoc::cmdToPsoc_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f597ee8bf0974f4ULL;
  static const uint64_t static_value2 = 0x111872a37a845ee1ULL;
};

template<class ContainerAllocator>
struct DataType< ::tae_psoc::cmdToPsoc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tae_psoc/cmdToPsoc";
  }

  static const char* value(const ::tae_psoc::cmdToPsoc_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tae_psoc::cmdToPsoc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 cmdInput\n"
;
  }

  static const char* value(const ::tae_psoc::cmdToPsoc_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tae_psoc::cmdToPsoc_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmdInput);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cmdToPsoc_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tae_psoc::cmdToPsoc_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tae_psoc::cmdToPsoc_<ContainerAllocator>& v)
  {
    s << indent << "cmdInput: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.cmdInput);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TAE_PSOC_MESSAGE_CMDTOPSOC_H
