// Generated by gencpp from file tae_psoc/Sensor_Fast.msg
// DO NOT EDIT!


#ifndef TAE_PSOC_MESSAGE_SENSOR_FAST_H
#define TAE_PSOC_MESSAGE_SENSOR_FAST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tae_psoc
{
template <class ContainerAllocator>
struct Sensor_Fast_
{
  typedef Sensor_Fast_<ContainerAllocator> Type;

  Sensor_Fast_()
    : sns_1_Fast()
    , sns_2_Fast()
    , sns_3_Fast()  {
    }
  Sensor_Fast_(const ContainerAllocator& _alloc)
    : sns_1_Fast(_alloc)
    , sns_2_Fast(_alloc)
    , sns_3_Fast(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _sns_1_Fast_type;
  _sns_1_Fast_type sns_1_Fast;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _sns_2_Fast_type;
  _sns_2_Fast_type sns_2_Fast;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _sns_3_Fast_type;
  _sns_3_Fast_type sns_3_Fast;





  typedef boost::shared_ptr< ::tae_psoc::Sensor_Fast_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tae_psoc::Sensor_Fast_<ContainerAllocator> const> ConstPtr;

}; // struct Sensor_Fast_

typedef ::tae_psoc::Sensor_Fast_<std::allocator<void> > Sensor_Fast;

typedef boost::shared_ptr< ::tae_psoc::Sensor_Fast > Sensor_FastPtr;
typedef boost::shared_ptr< ::tae_psoc::Sensor_Fast const> Sensor_FastConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tae_psoc::Sensor_Fast_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tae_psoc::Sensor_Fast_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tae_psoc

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'tae_psoc': ['/home/wilson/ros_ws_1/src/tae_psoc/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tae_psoc::Sensor_Fast_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tae_psoc::Sensor_Fast_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tae_psoc::Sensor_Fast_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tae_psoc::Sensor_Fast_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tae_psoc::Sensor_Fast_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tae_psoc::Sensor_Fast_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tae_psoc::Sensor_Fast_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37b8e6d7402e8a51053039e4e2fc0b2c";
  }

  static const char* value(const ::tae_psoc::Sensor_Fast_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37b8e6d7402e8a51ULL;
  static const uint64_t static_value2 = 0x053039e4e2fc0b2cULL;
};

template<class ContainerAllocator>
struct DataType< ::tae_psoc::Sensor_Fast_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tae_psoc/Sensor_Fast";
  }

  static const char* value(const ::tae_psoc::Sensor_Fast_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tae_psoc::Sensor_Fast_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16[] sns_1_Fast\n"
"int16[] sns_2_Fast\n"
"int16[] sns_3_Fast\n"
;
  }

  static const char* value(const ::tae_psoc::Sensor_Fast_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tae_psoc::Sensor_Fast_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sns_1_Fast);
      stream.next(m.sns_2_Fast);
      stream.next(m.sns_3_Fast);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sensor_Fast_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tae_psoc::Sensor_Fast_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tae_psoc::Sensor_Fast_<ContainerAllocator>& v)
  {
    s << indent << "sns_1_Fast[]" << std::endl;
    for (size_t i = 0; i < v.sns_1_Fast.size(); ++i)
    {
      s << indent << "  sns_1_Fast[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.sns_1_Fast[i]);
    }
    s << indent << "sns_2_Fast[]" << std::endl;
    for (size_t i = 0; i < v.sns_2_Fast.size(); ++i)
    {
      s << indent << "  sns_2_Fast[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.sns_2_Fast[i]);
    }
    s << indent << "sns_3_Fast[]" << std::endl;
    for (size_t i = 0; i < v.sns_3_Fast.size(); ++i)
    {
      s << indent << "  sns_3_Fast[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.sns_3_Fast[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TAE_PSOC_MESSAGE_SENSOR_FAST_H
